(()=>{"use strict";var __webpack_modules__={520:()=>{eval('\n;// CONCATENATED MODULE: ./src/services/dataManager.js\nlet data;\nlet photographer;\nlet mediasChosen = [];\nasync function fetchPhotographers() {\n\tconst res = await fetch("./data/FishEyeData.json");\n\tdata = await res.json();\n\treturn data.photographers;\n}\n\n\n\nasync function fetchChosenPhotographer(id) {\n\tawait fetchPhotographers();\n\tdata.photographers.forEach((data) => {\n\t\tif (data.id == id) {\n\t\t\tphotographer = data;\n\t\t}\n\t});\n\treturn photographer;\n}\n\n\n\nasync function fetchChosenMedia(id) {\n\tconst res = await fetch("./data/FishEyeData.json");\n\tdata = await res.json();\n\tdata.media.forEach((data) => {\n\t\tif (data.photographerId == id) {\n\t\t\tmediasChosen.push(data);\n\t\t}\n\t});\n\treturn mediasChosen;\n}\n\n\n\n;// CONCATENATED MODULE: ./src/components/btContact/btContact.js\n// export default function BtContact() {\n// \tconst btContacts = document.querySelectorAll(".btContact[type=button]");\n// \tconst bground = document.querySelector(".bground");\n\n// \t/**\n// \t * Au clic sur un des boutons "Contactez moi" => Ouverture de la form-modal\n// \t */\n// \tbtContacts.forEach((btContact) =>\n// \t\tbtContact.addEventListener("click", function () {\n// \t\t\tbground.setAttribute("visible", "true");\n// \t\t})\n// \t);\n// }\n\nclass BtContact {\n\tconstructor(domtarget, props) {\n\t\tthis.DOM = document.createElement("button");\n\t\tif (typeof props.className === "string")\n\t\t\tprops.className = [props.className];\n\t\tif (props.className2) props.className.push(props.className2);\n\t\tprops.className.forEach((newClass) => {\n\t\t\tthis.DOM.classList.add(newClass);\n\t\t});\n\t\tthis.DOM.type = props.type;\n\t\tthis.DOM.textContent = props.text;\n\t\tif (this.DOM.classList.contains("goToContent")) {\n\t\t\twindow.onscroll = () => this.scrollHandler();\n\t\t\tthis.DOM.onclick = this.goToContent;\n\t\t}\n\t\tif (this.DOM.classList.contains("btContact")) {\n\t\t\tthis.DOM.onclick = this.goFormContact;\n\t\t}\n\t\tdomtarget.appendChild(this.DOM);\n\t\tthis.visible = false;\n\t}\n\n\tgoFormContact() {\n\t\tconst bground = document.querySelector(".bground");\n\t\t// bground.setAttribute("visible", "true");\n\t\tbground.style.display = "block";\n\t\tconsole.log(bground);\n\t}\n\n\tgoToContent() {\n\t\twindow.location.href = "#main";\n\t}\n\n\tscrollHandler() {\n\t\tconst shouldBeVisible = window.scrollY > 20;\n\t\t// console.log(" shouldBeVisible", shouldBeVisible, "isVisible", this.visible);\n\t\tif (this.visible === shouldBeVisible) return;\n\t\tthis.DOM.setAttribute("visible", shouldBeVisible.toString());\n\t\tthis.visible = shouldBeVisible;\n\t\tconsole.log(this);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/components/photographer-card/photographer-card.js\n\n/**\n * Carte du photographe dans le lobby\n */\nclass PhotographerCard {\n\tconstructor(domTarget, props) {\n\t\tthis.imgLink = "./img/PhotographersIDPhotos/" + props.portrait;\n\t\tthis.name = props.name;\n\t\tthis.location = props.city + ", " + props.country;\n\t\tthis.tagline = props.tagline;\n\t\tthis.price = props.price + "â‚¬/jour";\n\t\tthis.tags = props.tags;\n\t\tthis.id = props.id;\n\t\tthis.render(domTarget);\n\t}\n\n\trender(domTarget) {\n\t\tthis.DOM = document.createElement("article");\n\t\tthis.DOM.classList.add("photographer-card");\n\t\tdomTarget.appendChild(this.DOM);\n\t\tthis.button = document.createElement("button");\n\t\tthis.button.classList.add("photographer-card-link");\n\t\tthis.button.id = this.id;\n\t\tthis.DOM.appendChild(this.button);\n\t\tthis.goPhotographerPage();\n\t\tthis.imgContainer = document.createElement("div");\n\t\tthis.imgContainer.classList.add("photographer-card-link-imgContainer");\n\t\tthis.button.appendChild(this.imgContainer);\n\t\tthis.insertImg();\n\t\tthis.imgContainer.appendChild(this.img);\n\t\tthis.h2 = document.createElement("h2");\n\t\tthis.h2.textContent = this.name;\n\t\tthis.button.appendChild(this.h2);\n\t\tthis.insertLocationElm();\n\t\tthis.insertTagline();\n\t\tthis.priceElm = document.createElement("p");\n\t\tthis.priceElm.classList.add("price");\n\t\tthis.priceElm.textContent = this.price;\n\t\tthis.DOM.appendChild(this.priceElm);\n\t\tthis.nav = document.createElement("nav");\n\t\tthis.nav.title = this.name + " Tags";\n\t\tthis.tags.forEach((/** @type {any} */ tag) => {\n\t\t\tnew Tags(this.nav, "", tag, "tags");\n\t\t});\n\t\tthis.DOM.appendChild(this.nav);\n\t}\n\n\tgoPhotographerPage() {\n\t\tthis.button.onclick = () => {\n\t\t\twindow.location.href = "./photographer.html?id=" + this.button.id;\n\n\t\t\tconsole.log(this.button.id);\n\t\t\treturn this.id;\n\t\t};\n\t}\n\n\tinsertTagline() {\n\t\tthis.taglineElm = document.createElement("p");\n\t\tthis.taglineElm.classList.add("tagline");\n\t\tthis.taglineElm.textContent = this.tagline;\n\t\tthis.DOM.appendChild(this.taglineElm);\n\t}\n\n\tinsertImg() {\n\t\tthis.img = document.createElement("img");\n\t\tthis.img.src = this.imgLink;\n\t\tthis.img.alt = "";\n\t\tthis.img.setAttribute("width", "208px");\n\t\tthis.img.setAttribute("height", "208px");\n\t}\n\n\tinsertLocationElm() {\n\t\tthis.locationElm = document.createElement("p");\n\t\tthis.locationElm.classList.add("location");\n\t\tthis.locationElm.textContent = this.location;\n\t\tthis.DOM.appendChild(this.locationElm);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/components/main-lobby/main-lobby.js\n\n\nclass MainLobby {\n\tconstructor(domTarget, props) {\n\t\tthis.photographers = props.photographers;\n\t\tthis.tagsChecked = props.tagsChecked;\n\n\t\tthis.DOM = document.createElement("main");\n\t\tthis.DOM.setAttribute("id", "main");\n\t\tdomTarget.appendChild(this.DOM);\n\t\tthis.photographers.forEach(\n\t\t\t(/** @type {{ tags: any[]; }} */ photographer) => {\n\t\t\t\tif (this.tagsChecked === undefined || this.tagsChecked.length === 0) {\n\t\t\t\t\tnew PhotographerCard(this.DOM, {\n\t\t\t\t\t\t...photographer,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst test = photographer.tags.some((tag) =>\n\t\t\t\t\t\tthis.tagsChecked.includes("#" + tag)\n\t\t\t\t\t);\n\t\t\t\t\tif (test) {\n\t\t\t\t\t\tnew PhotographerCard(this.DOM, {\n\t\t\t\t\t\t\t...photographer,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/components/tags/tags.js\n\n\nclass Tags {\n\tconstructor(\n\t\tdomTarget,\n\t\tphotographers,\n\t\ttag,\n\t\tclassName,\n\t\tclassName2,\n\t\ttagsChecked\n\t) {\n\t\tthis.photographers = photographers;\n\t\tthis.tag = tag;\n\t\tthis.className = [className];\n\t\tif (className2) {\n\t\t\tthis.className.push(className2);\n\t\t}\n\t\tthis.tagsChecked = tagsChecked;\n\t\tthis.DOM = document.createElement("button");\n\t\tthis.className.forEach((newClass) => {\n\t\t\tthis.DOM.classList.add(newClass);\n\t\t});\n\t\tthis.DOM.textContent = "#" + this.tag;\n\t\tdomTarget.appendChild(this.DOM);\n\t\tthis.DOM.onclick = () => this.tagsManage(this.DOM);\n\t\tthis.addDisabled(this.DOM);\n\t}\n\n\ttagsManage(element) {\n\t\tthis.tagsCheckedManager(element);\n\t\tthis.pagesManager();\n\t}\n\n\tpagesManager() {\n\t\tif (window.location.pathname.split("/").pop() == "") {\n\t\t\tconst body = document.querySelector("body");\n\t\t\tif (document.querySelector("main")) {\n\t\t\t\tbody.removeChild(document.querySelector("main"));\n\t\t\t}\n\t\t\tnew MainLobby(body, {\n\t\t\t\tphotographers: this.photographers,\n\t\t\t\ttagsChecked: this.tagsChecked,\n\t\t\t});\n\t\t} else {\n\t\t\twindow.location.href = "./?tag=" + this.tag;\n\t\t}\n\t}\n\n\ttagsCheckedManager(element) {\n\t\tif (!element.hasAttribute("isChecked")) {\n\t\t\telement.setAttribute("isChecked", "true");\n\t\t\tthis.tagsChecked.push(element.innerHTML);\n\t\t} else {\n\t\t\telement.removeAttribute("isChecked");\n\t\t\tthis.tagsChecked.splice(this.tagsChecked.indexOf(element.innerHTML), 1);\n\t\t}\n\t}\n\n\taddDisabled(button) {\n\t\tif (this.className.length === 1) {\n\t\t\tbutton.disabled = true;\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/components/header/header.js\n\n\nclass Header {\n\t/**\n\t * [constructor description]\n\t *\n\t * @param   {HTMLElement}  domTarget   [domTarget description]\n\t *\n\t * @param   {String}  className   [className description]\n\t * @param   {String}  [className2]  [className2 description]\n\t */\n\tconstructor(domTarget, photographers, tagsChecked, className, className2) {\n\t\tthis.photographers = photographers;\n\t\tthis.tagsChecked = tagsChecked;\n\t\tthis.className = [className];\n\t\tif (className2) this.className.push(className2);\n\t\tthis.tagsValueArray = [\n\t\t\t"portrait",\n\t\t\t"art",\n\t\t\t"fashion",\n\t\t\t"architecture",\n\t\t\t"travel",\n\t\t\t"sports",\n\t\t\t"animals",\n\t\t\t"events",\n\t\t];\n\t\tthis.DOM = document.createElement("header");\n\t\tthis.className.forEach((newClass) => {\n\t\t\tthis.DOM.classList.add(newClass);\n\t\t});\n\t\tdomTarget.appendChild(this.DOM);\n\t\tthis.logoBt = document.createElement("button");\n\t\tthis.logoBt.classList.add("logo");\n\t\tthis.logoBt.title = "logo";\n\t\t// this.logoBt.alt = "Fisheye Home Page";\n\t\tthis.DOM.appendChild(this.logoBt);\n\t\tthis.logoBt.onclick = this.goHome;\n\t\tthis.logoImg = document.createElement("img");\n\t\tthis.logoImg.src = "./img/logo/logo.svg";\n\t\tthis.logoImg.alt = "";\n\t\tthis.logoBt.appendChild(this.logoImg);\n\t\tif (this.className.length === 1) {\n\t\t\tthis.h1 = document.createElement("h1");\n\t\t\tthis.h1.classList.add("lobbyH1");\n\t\t\tthis.h1.textContent = "Nos photographes";\n\t\t\tthis.DOM.appendChild(this.h1);\n\t\t\tthis.nav = document.createElement("nav");\n\t\t\tthis.tagsValueArray.forEach((tagValue) => {\n\t\t\t\tnew Tags(\n\t\t\t\t\tthis.nav,\n\t\t\t\t\tthis.photographers,\n\t\t\t\t\ttagValue,\n\t\t\t\t\t"tags",\n\t\t\t\t\t"tags-link",\n\t\t\t\t\tthis.tagsChecked\n\t\t\t\t);\n\t\t\t});\n\t\t\tthis.DOM.appendChild(this.nav);\n\t\t\tthis.tags = document.querySelectorAll(".tags-link");\n\t\t\tthis.tagsChecked.forEach((tagChecked) => {\n\t\t\t\tthis.tags.forEach((tag) => {\n\t\t\t\t\tif (tag.innerHTML == tagChecked) {\n\t\t\t\t\t\ttag.setAttribute("isChecked", "true");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// return this.tagsChecked;\n\t}\n\tgoHome() {\n\t\tconsole.log("test");\n\t\twindow.location.href = "./";\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/components/photographer-card-big/photographer-card-big.js\n\n\n\n\n/**\n * Carte du photographe dans sa page perso\n */\nclass PhotographerCardBig extends PhotographerCard {\n\tconstructor(domTarget, props) {\n\t\tsuper(domTarget, props);\n\t}\n\n\trender(domTarget) {\n\t\tthis.tagsChecked = [];\n\t\tconsole.log(this.tagsChecked);\n\t\tthis.DOM = document.createElement("article");\n\t\tthis.DOM.classList.add("photographer-card-big");\n\t\tdomTarget.appendChild(this.DOM);\n\t\tthis.photographerCardBigImgContainer = document.createElement("div");\n\t\tthis.photographerCardBigImgContainer.classList.add(\n\t\t\t"photographer-card-link-imgContainer",\n\t\t\t"photographer-card-big-imgContainer"\n\t\t);\n\t\tthis.DOM.appendChild(this.photographerCardBigImgContainer);\n\t\tthis.insertImg();\n\t\tthis.photographerCardBigImgContainer.appendChild(this.img);\n\t\tthis.h2 = document.createElement("h2");\n\t\tthis.h2.textContent = this.name;\n\t\tthis.DOM.appendChild(this.h2);\n\t\tthis.insertLocationElm();\n\t\tthis.insertTagline();\n\t\tthis.nav = document.createElement("nav");\n\t\tthis.tags.forEach((tag) => {\n\t\t\tnew Tags(this.nav, "", tag, "tags", "tags-link", this.tagsChecked);\n\t\t});\n\t\tthis.DOM.appendChild(this.nav);\n\t\tthis.insertBtContactDesktop(this.DOM);\n\t\tthis.insertBtContactMobile(this.DOM);\n\t}\n\n\tinsertTagline() {\n\t\tthis.taglineElm = document.createElement("p");\n\t\tthis.taglineElm.classList.add("tagline");\n\t\tthis.taglineElm.textContent = this.tagline;\n\t\tthis.DOM.appendChild(this.taglineElm);\n\t}\n\n\tinsertImg() {\n\t\tthis.img = document.createElement("img");\n\t\tthis.img.src = this.imgLink;\n\t\tthis.img.alt = "";\n\t\tthis.img.setAttribute("width", "208px");\n\t\tthis.img.setAttribute("height", "208px");\n\t}\n\n\tinsertLocationElm() {\n\t\tthis.locationElm = document.createElement("p");\n\t\tthis.locationElm.classList.add("location");\n\t\tthis.locationElm.textContent = this.location;\n\t\tthis.DOM.appendChild(this.locationElm);\n\t}\n\n\t/**\n\t * Insertion du bouton contact version desktop\n\t *\n\t * @param   {HTMLElement}  article  Description du photographe\n\t *\n\t * @return  {void}       \t Insertion du bouton contact version desktop\n\t */\n\tinsertBtContactDesktop(article) {\n\t\tnew BtContact(article, {\n\t\t\tclassName: "btContact",\n\t\t\tclassName2: "btContact-desktop",\n\t\t\ttype: "button",\n\t\t\ttext: "Contactez moi",\n\t\t});\n\t}\n\t/**\n\t * Insertion du bouton contact version mobile\n\t *\n\t * @param   {HTMLElement}  article  Description du photographe\n\t *\n\t * @return  {void}       \t Insertion du bouton contact version mobile\n\t */\n\tinsertBtContactMobile(article) {\n\t\tnew BtContact(article, {\n\t\t\tclassName: "btContact",\n\t\t\tclassName2: "btContact-mobile",\n\t\t\ttype: "button",\n\t\t\ttext: "Contactez moi",\n\t\t});\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/components/widget/widget.js\nclass Widget {\n\tconstructor(domTarget) {\n\t\tthis.DOM = document.createElement("div");\n\t\tthis.DOM.classList.add("no-widget");\n\t\tthis.DOM.id = "widget";\n\t\tdomTarget.appendChild(this.DOM);\n\t\tthis.render();\n\t}\n\trender() {\n\t\tthis.DOM.innerHTML += /* html */ `\n\t\t\t<label for="select" onclick=toggleOptList(select)>Trier par</label>\n\t\t\t\t<form>\n\t\t\t\t\t<select name="PopularitÃ©">\n\t\t\t\t\t\t<option>PopularitÃ©</option>\n\t\t\t\t\t\t<option>Date</option>\n\t\t\t\t\t\t<option>Titre</option>\n\t\t\t\t\t</select>\n\t\t\t\t\t<div class="select" tabindex="0" id="select" role="listbox">\n\t\t\t\t\t\t\x3c!-- Ce containeur sera utilisÃ© pour afficher la valeur courante du widget --\x3e\n\t\t\t\t\t\t<span class="value">PopularitÃ©</span>\n\t\t\t\t\t\t\x3c!-- Ce conteneur contiendra toutes les options disponibles pour le widget.\n\t\t\t\t\t\tComme c\'est une liste, il y sens Ã  utiliser l\'Ã©lÃ©ment ul. --\x3e\n\t\t\t\t\t\t<ul class="optList hidden" role="presentation">\n\t\t\t\t\t\t\t\x3c!-- Chaque option ne contient que la valeur Ã  afficher, Nous verrons plus loin\n\t\t\t\t\t\t\tcomment gÃ©rer la valeur rÃ©elle qui sera envoyÃ©e avec les donnÃ©es du formulaire --\x3e\n\t\t\t\t\t\t\t<li class="option" onclick="refreshMediaList(\'PopularitÃ©\')" role="option">PopularitÃ©</li>\n\t\t\t\t\t\t\t<li class="option" onclick="refreshMediaList(\'Date\')" role="option">Date</li>\n\t\t\t\t\t\t\t<li class="option" onclick="refreshMediaList(\'Titre\')" role="option">Titre</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t`;\n\t\t// const widget = document.getElementById("widget");\n\t\tthis.DOM.classList.remove("no-widget");\n\t\tthis.DOM.classList.add("widget");\n\n\t\t// Cette fonction est utilisÃ©e chaque fois que nous voulons dÃ©sactiver un\n\t\t// widget personnalisÃ©. Elle prend un paramÃ¨tre\n\t\t// select : le nÅ“ud DOM avec la classe select Ã  dÃ©sactiver\n\t\tfunction deactivateSelect(select) {\n\t\t\t// Si le widget n\'est pas actif, il n\'y a rien Ã  faire\n\t\t\tif (!select.classList.contains("active")) return;\n\t\t\t// Nous devons obtenir la liste des options pour le widget personnalisÃ©\n\t\t\tlet optList = select.querySelector(".optList");\n\t\t\t// Nous cachons la liste des options\n\t\t\toptList.classList.add("hidden");\n\t\t\t// et nous dÃ©sactivons le widget personnalisÃ© lui-mÃªme\n\t\t\tselect.classList.remove("active");\n\t\t}\n\n\t\t// Cette fonction sera utilisÃ©e chaque fois que l\'utilisateur veut (des)activer le widget\n\t\t// Elle prend deux paramÃ¨tres :\n\t\t// select : le nÅ“ud DOM de la classe `select` Ã  activer\n\t\t// selectList : la liste de tous les nÅ“uds DOM de la classe `select`\n\t\tfunction activeSelect(select, selectList) {\n\t\t\t// Si le widget est dÃ©jÃ  actif il n\'y a rien Ã  faire\n\t\t\tif (select.classList.contains("active")) return;\n\t\t\t// Nous devons dÃ©sactiver tous les widgets personnalisÃ©s\n\t\t\t// comme la fonction deactivateSelect remplit toutes les fonctionnalitÃ©s de la\n\t\t\t// fonction de rappel forEach, nous l\'utilisons directement sans utiliser\n\t\t\t// une fonction anonyme intermÃ©diaire.\n\t\t\tselectList.forEach(deactivateSelect);\n\t\t\t// Et nous activons l\'Ã©tat du widget donnÃ©\n\t\t\t// select.classList.add("active");\n\t\t}\n\n\t\t// Cette fonction sera utilisÃ©e chaque fois que l\'utilisateur veut enrouler/dÃ©rouler la\n\t\t// liste des options\n\t\t// Elle prend un paramÃ¨tre :\n\t\t// select : le nÅ“ud DOM de la liste Ã  basculer\n\t\tfunction toggleOptList(select) {\n\t\t\t// La liste est prise Ã  partir du widget\n\t\t\tlet optList = select.querySelector(".optList");\n\t\t\t// Nous changeons la classe de la liste pour l\'enrouler/dÃ©rouler\n\t\t\toptList.classList.toggle("hidden");\n\t\t\tselect.classList.toggle("active");\n\t\t}\n\n\t\t// Cett fonction sera utilisÃ©e chaque fois qu\'il faut mettre en surbrillance\n\t\t// une option.  Elle prend deux paramÃ¨tres :\n\t\t// select : le nÅ“ud DOM de la classe `select`\n\t\t//          contenant l\'option Ã  mettre en surbrillance\n\t\t// option : le nÅ“ud DOM de la classe `option` Ã  mettre en surbrillance\n\t\tfunction highlightOption(select, option) {\n\t\t\t// Obtenir la liste de toutes les options disponibles pour l\'Ã©lÃ©mÃ©nt sÃ©lectionnÃ©\n\t\t\tlet optionList = select.querySelectorAll(".option");\n\t\t\t// Supprimer la surbrillance pour toutes les options\n\t\t\toptionList.forEach(function (other) {\n\t\t\t\tother.classList.remove("highlight");\n\t\t\t});\n\t\t\t// Mettre en surbrillance l\'option correcte\n\t\t\toption.classList.add("highlight");\n\t\t}\n\n\t\t// Nous lions le widget aux Ã©vÃ©nements dÃ¨s le chargement du document\n\t\tlet selectList = document.querySelectorAll(".select");\n\t\t// Chaque widget personnalisÃ© doit Ãªtre initialisÃ©\n\t\tselectList.forEach(function (select) {\n\t\t\t// de mÃªme que tous les Ã©lÃ©ments `option`\n\t\t\tlet optionList = select.querySelectorAll(".option");\n\t\t\t// Chaque fois que l\'utilisateur passe le pointeur de souris\n\t\t\t// sur une option, nous mettons en surbrillance la dite option\n\t\t\toptionList.forEach(function (option) {\n\t\t\t\toption.addEventListener("mouseover", function () {\n\t\t\t\t\t// Note : les variables `select` et `option` sont des "closures"\n\t\t\t\t\t// disponibles dans la portÃ©e de notre appel de fonction.\n\t\t\t\t\thighlightOption(select, option);\n\t\t\t\t});\n\t\t\t});\n\t\t\t// Chaque fois que l\'utilisateur clique sur un Ã©lÃ©ment personnalisÃ©\n\t\t\tselect.addEventListener("click", function () {\n\t\t\t\t// Note : la variable `select` est une "closure"\n\t\t\t\t// available dans la portÃ©e de notre appel de fonction.\n\t\t\t\t// Nous basculons la visibilitÃ© de la liste des options\n\t\t\t\ttoggleOptList(select);\n\t\t\t});\n\t\t\t// Dans le cas oÃ¹ le widget obtient le focus\n\t\t\t// Le widget obtient le focus chaque fois que l\'utilisateur clique dessus\n\t\t\t// ou presse la touche Tab pour avoir accÃ¨s au widget\n\t\t\tselect.addEventListener("focus", function () {\n\t\t\t\t// Note : les variable `select` et `selectList` sont des "closures"\n\t\t\t\t// disponibles dans la portÃ©e de notre appel de fonction.\n\t\t\t\t// Nous activons le widget\n\t\t\t\tactiveSelect(select, selectList);\n\t\t\t});\n\t\t\t// Dans le cas oÃ¹ le widget perd le focus\n\t\t\tselect.addEventListener("blur", function () {\n\t\t\t\t// Note : la variable `select` est une "closure"\n\t\t\t\t// disponible dans la portÃ©e de notre appel de fonction.\n\t\t\t\t// Nous dÃ©sactivons le widget\n\t\t\t\tdeactivateSelect(select);\n\t\t\t});\n\t\t});\n\t\t// Cette fonction met Ã  jour la valeur affichÃ©e et la synchronise avec celle\n\t\t// du widget natif. Elle prend deux paramÃ¨tres :\n\t\t// select : le nÅ“ud DOM de la classe `select` contenant la valuer Ã  mettre Ã  jour\n\t\t// index  : l\'index de la valeur choisie\n\t\tfunction updateValue(select, index) {\n\t\t\t// Nous devons obtenir le widget natif correspondant au widget personnalisÃ©\n\t\t\t// Dans notre exemple, le widget natif est un parent du widget personnalisÃ©\n\t\t\tlet nativeWidget = select.previousElementSibling;\n\t\t\t// Nou devons aussi obtenir la valeur de remplacement du widget personnalisÃ©\n\t\t\tlet value = select.querySelector(".value");\n\t\t\t// Et nous avons besoin de toute la liste des options\n\t\t\tlet optionList = select.querySelectorAll(".option");\n\t\t\t// Nous nous assurons qu\'aucune option n\'est sÃ©lectionnÃ©e\n\t\t\toptionList.forEach(function (other) {\n\t\t\t\tother.setAttribute("aria-selected", "false");\n\t\t\t});\n\t\t\t// Nous nous assurons que l\'option choisie est sÃ©lectionnÃ©e\n\t\t\toptionList[index].setAttribute("aria-selected", "true");\n\t\t\t// Nous dÃ©finissons l\'index choisi Ã  l\'index du choix\n\t\t\tnativeWidget.selectedIndex = index;\n\t\t\t// Nous mettons Ã  jour la valeur de remplacement en accord\n\t\t\tvalue.innerHTML = optionList[index].innerHTML;\n\t\t\t// Et nous mettons en surbrillance l\'option correspondante du widget personnalisÃ©\n\t\t\thighlightOption(select, optionList[index]);\n\t\t}\n\n\t\t// Cette fonction renvoie l\'index courant dans le widget natif\n\t\t// Elle prend un paramÃ¨tre :\n\t\t// select : le nÅ“ud DOM avec la classe `select` relative au widget natif\n\t\tfunction getIndex(select) {\n\t\t\t// Nous avons besoin d\'avoir accÃ¨s au widget natif pour le widget personnalisÃ©\n\t\t\t// Dans notre exemple, le widget natif est un parent du widget personnalisÃ©\n\n\t\t\tlet nativeWidget = select.previousElementSibling;\n\t\t\treturn nativeWidget.selectedIndex;\n\t\t}\n\n\t\t// Nous lions le widget aux Ã©vÃ©nements dÃ¨s le chargement du document\n\n\t\t// let selectList = document.querySelectorAll(".select");\n\t\t// Chaque widget personnalisÃ© doit Ãªtre initialisÃ©\n\t\tselectList.forEach(function (select) {\n\t\t\tlet optionList = select.querySelectorAll(".option"),\n\t\t\t\tselectedIndex = getIndex(select);\n\t\t\t// Nous rendons le widget personnalisÃ© capable d\'avoir le focus\n\t\t\tselect.tabIndex = 0;\n\t\t\t// Nous faisons en sorte que le widget natif ne puisse plus avoir le focus\n\t\t\tselect.previousElementSibling.tabIndex = -1;\n\t\t\t// Nous nous assurons que la valeur sÃ©lectionnÃ©e par dÃ©faut est bien affichÃ©e\n\t\t\tupdateValue(select, selectedIndex);\n\t\t\t// Chaque fois que l\'utilisateur clique sur une option, nous mettons Ã \n\t\t\t// jour la valeur en accord\n\t\t\toptionList.forEach(function (option, index) {\n\t\t\t\toption.addEventListener("click", function () {\n\t\t\t\t\tupdateValue(select, index);\n\t\t\t\t});\n\t\t\t});\n\t\t\t// Chaque fois que l\'utilisateur utilise le clavier sur un widget\n\t\t\t// avec focus, les valeurs sont mises Ã  jour en accord\n\t\t\tselect.addEventListener("keyup", function (e) {\n\t\t\t\tlet length = optionList.length,\n\t\t\t\t\tindex = getIndex(select);\n\t\t\t\t// Quand l\'utilisateur presse â‡“, nous allons Ã  l\'option suivante\n\t\t\t\tif (e.keyCode === 40 && index < length - 1) {\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\t// Quand l\'utilisateur presse â‡‘, nous sautons Ã  l\'option suivante\n\t\t\t\tif (e.keyCode === 38 && index > 0) {\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\t// Quand l\'utilisateur presse enter, nous mettons Ã  jour la valeur en accord\n\t\t\t\tif (e.keyCode === 13) {\n\t\t\t\t\tlet optList = select.querySelector(".optList");\n\t\t\t\t\t// Nous changeons la classe de la liste pour l\'enrouler/dÃ©rouler\n\t\t\t\t\toptList.classList.toggle("hidden");\n\t\t\t\t\tselect.classList.toggle("active");\n\t\t\t\t\tif (!select.classList.contains("active")) {\n\t\t\t\t\t\tlet valueElm = document.querySelector(".value");\n\t\t\t\t\t\twindow.refreshMediaList(valueElm.innerHTML);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tupdateValue(select, index);\n\t\t\t});\n\t\t});\n\t\tconst label = document.querySelector("label");\n\t\tconst select = document.querySelector(".select");\n\t\tlabel.addEventListener("click", () => {\n\t\t\ttoggleOptList(select);\n\t\t});\n\t}\n}\n\n// const widget = document.getElementById("widget");\n\n// window.addEventListener("load", function () {\n// \twidget.classList.remove("no-widget");\n// \twidget.classList.add("widget");\n// });\n\n// // Cette fonction est utilisÃ©e chaque fois que nous voulons dÃ©sactiver un\n// // widget personnalisÃ©. Elle prend un paramÃ¨tre\n// // select : le nÅ“ud DOM avec la classe select Ã  dÃ©sactiver\n// function deactivateSelect(select) {\n// \t// Si le widget n\'est pas actif, il n\'y a rien Ã  faire\n// \tif (!select.classList.contains("active")) return;\n// \t// Nous devons obtenir la liste des options pour le widget personnalisÃ©\n// \tlet optList = select.querySelector(".optList");\n// \t// Nous cachons la liste des options\n// \toptList.classList.add("hidden");\n// \t// et nous dÃ©sactivons le widget personnalisÃ© lui-mÃªme\n// \tselect.classList.remove("active");\n// }\n\n// // Cette fonction sera utilisÃ©e chaque fois que l\'utilisateur veut (des)activer le widget\n// // Elle prend deux paramÃ¨tres :\n// // select : le nÅ“ud DOM de la classe `select` Ã  activer\n// // selectList : la liste de tous les nÅ“uds DOM de la classe `select`\n// function activeSelect(select, selectList) {\n// \t// Si le widget est dÃ©jÃ  actif il n\'y a rien Ã  faire\n// \tif (select.classList.contains("active")) return;\n// \t// Nous devons dÃ©sactiver tous les widgets personnalisÃ©s\n// \t// comme la fonction deactivateSelect remplit toutes les fonctionnalitÃ©s de la\n// \t// fonction de rappel forEach, nous l\'utilisons directement sans utiliser\n// \t// une fonction anonyme intermÃ©diaire.\n// \tselectList.forEach(deactivateSelect);\n// \t// Et nous activons l\'Ã©tat du widget donnÃ©\n// \t// select.classList.add("active");\n// }\n\n// // Cette fonction sera utilisÃ©e chaque fois que l\'utilisateur veut enrouler/dÃ©rouler la\n// // liste des options\n// // Elle prend un paramÃ¨tre :\n// // select : le nÅ“ud DOM de la liste Ã  basculer\n// function toggleOptList(select) {\n// \t// La liste est prise Ã  partir du widget\n// \tlet optList = select.querySelector(".optList");\n// \t// Nous changeons la classe de la liste pour l\'enrouler/dÃ©rouler\n// \toptList.classList.toggle("hidden");\n// \tselect.classList.toggle("active");\n// }\n\n// // Cett fonction sera utilisÃ©e chaque fois qu\'il faut mettre en surbrillance\n// // une option.  Elle prend deux paramÃ¨tres :\n// // select : le nÅ“ud DOM de la classe `select`\n// //          contenant l\'option Ã  mettre en surbrillance\n// // option : le nÅ“ud DOM de la classe `option` Ã  mettre en surbrillance\n// function highlightOption(select, option) {\n// \t// Obtenir la liste de toutes les options disponibles pour l\'Ã©lÃ©mÃ©nt sÃ©lectionnÃ©\n// \tlet optionList = select.querySelectorAll(".option");\n// \t// Supprimer la surbrillance pour toutes les options\n// \toptionList.forEach(function (other) {\n// \t\tother.classList.remove("highlight");\n// \t});\n// \t// Mettre en surbrillance l\'option correcte\n// \toption.classList.add("highlight");\n// }\n\n// // Nous lions le widget aux Ã©vÃ©nements dÃ¨s le chargement du document\n// window.addEventListener("load", function () {\n// \tlet selectList = document.querySelectorAll(".select");\n// \t// Chaque widget personnalisÃ© doit Ãªtre initialisÃ©\n// \tselectList.forEach(function (select) {\n// \t\t// de mÃªme que tous les Ã©lÃ©ments `option`\n// \t\tlet optionList = select.querySelectorAll(".option");\n// \t\t// Chaque fois que l\'utilisateur passe le pointeur de souris\n// \t\t// sur une option, nous mettons en surbrillance la dite option\n// \t\toptionList.forEach(function (option) {\n// \t\t\toption.addEventListener("mouseover", function () {\n// \t\t\t\t// Note : les variables `select` et `option` sont des "closures"\n// \t\t\t\t// disponibles dans la portÃ©e de notre appel de fonction.\n// \t\t\t\thighlightOption(select, option);\n// \t\t\t});\n// \t\t});\n// \t\t// Chaque fois que l\'utilisateur clique sur un Ã©lÃ©ment personnalisÃ©\n// \t\tselect.addEventListener("click", function () {\n// \t\t\t// Note : la variable `select` est une "closure"\n// \t\t\t// available dans la portÃ©e de notre appel de fonction.\n// \t\t\t// Nous basculons la visibilitÃ© de la liste des options\n// \t\t\ttoggleOptList(select);\n// \t\t});\n// \t\t// Dans le cas oÃ¹ le widget obtient le focus\n// \t\t// Le widget obtient le focus chaque fois que l\'utilisateur clique dessus\n// \t\t// ou presse la touche Tab pour avoir accÃ¨s au widget\n// \t\tselect.addEventListener("focus", function () {\n// \t\t\t// Note : les variable `select` et `selectList` sont des "closures"\n// \t\t\t// disponibles dans la portÃ©e de notre appel de fonction.\n// \t\t\t// Nous activons le widget\n// \t\t\tactiveSelect(select, selectList);\n// \t\t});\n// \t\t// Dans le cas oÃ¹ le widget perd le focus\n// \t\tselect.addEventListener("blur", function () {\n// \t\t\t// Note : la variable `select` est une "closure"\n// \t\t\t// disponible dans la portÃ©e de notre appel de fonction.\n// \t\t\t// Nous dÃ©sactivons le widget\n// \t\t\tdeactivateSelect(select);\n// \t\t});\n// \t});\n// });\n// // Cette fonction met Ã  jour la valeur affichÃ©e et la synchronise avec celle\n// // du widget natif. Elle prend deux paramÃ¨tres :\n// // select : le nÅ“ud DOM de la classe `select` contenant la valuer Ã  mettre Ã  jour\n// // index  : l\'index de la valeur choisie\n// function updateValue(select, index) {\n// \t// Nous devons obtenir le widget natif correspondant au widget personnalisÃ©\n// \t// Dans notre exemple, le widget natif est un parent du widget personnalisÃ©\n// \tlet nativeWidget = select.previousElementSibling;\n// \t// Nou devons aussi obtenir la valeur de remplacement du widget personnalisÃ©\n// \tlet value = select.querySelector(".value");\n// \t// Et nous avons besoin de toute la liste des options\n// \tlet optionList = select.querySelectorAll(".option");\n// \t// Nous nous assurons qu\'aucune option n\'est sÃ©lectionnÃ©e\n// \toptionList.forEach(function (other) {\n// \t\tother.setAttribute("aria-selected", "false");\n// \t});\n// \t// Nous nous assurons que l\'option choisie est sÃ©lectionnÃ©e\n// \toptionList[index].setAttribute("aria-selected", "true");\n// \t// Nous dÃ©finissons l\'index choisi Ã  l\'index du choix\n// \tnativeWidget.selectedIndex = index;\n// \t// Nous mettons Ã  jour la valeur de remplacement en accord\n// \tvalue.innerHTML = optionList[index].innerHTML;\n// \t// Et nous mettons en surbrillance l\'option correspondante du widget personnalisÃ©\n// \thighlightOption(select, optionList[index]);\n// }\n\n// // Cette fonction renvoie l\'index courant dans le widget natif\n// // Elle prend un paramÃ¨tre :\n// // select : le nÅ“ud DOM avec la classe `select` relative au widget natif\n// function getIndex(select) {\n// \t// Nous avons besoin d\'avoir accÃ¨s au widget natif pour le widget personnalisÃ©\n// \t// Dans notre exemple, le widget natif est un parent du widget personnalisÃ©\n\n// \tlet nativeWidget = select.previousElementSibling;\n// \treturn nativeWidget.selectedIndex;\n// }\n\n// // Nous lions le widget aux Ã©vÃ©nements dÃ¨s le chargement du document\n// window.addEventListener("load", function () {\n// \tlet selectList = document.querySelectorAll(".select");\n// \t// Chaque widget personnalisÃ© doit Ãªtre initialisÃ©\n// \tselectList.forEach(function (select) {\n// \t\tlet optionList = select.querySelectorAll(".option"),\n// \t\t\tselectedIndex = getIndex(select);\n// \t\t// Nous rendons le widget personnalisÃ© capable d\'avoir le focus\n// \t\tselect.tabIndex = 0;\n// \t\t// Nous faisons en sorte que le widget natif ne puisse plus avoir le focus\n// \t\tselect.previousElementSibling.tabIndex = -1;\n// \t\t// Nous nous assurons que la valeur sÃ©lectionnÃ©e par dÃ©faut est bien affichÃ©e\n// \t\tupdateValue(select, selectedIndex);\n// \t\t// Chaque fois que l\'utilisateur clique sur une option, nous mettons Ã \n// \t\t// jour la valeur en accord\n// \t\toptionList.forEach(function (option, index) {\n// \t\t\toption.addEventListener("click", function () {\n// \t\t\t\tupdateValue(select, index);\n// \t\t\t});\n// \t\t});\n// \t\t// Chaque fois que l\'utilisateur utilise le clavier sur un widget\n// \t\t// avec focus, les valeurs sont mises Ã  jour en accord\n// \t\tselect.addEventListener("keyup", function (e) {\n// \t\t\tlet length = optionList.length,\n// \t\t\t\tindex = getIndex(select);\n// \t\t\t// Quand l\'utilisateur presse â‡“, nous allons Ã  l\'option suivante\n// \t\t\tif (e.keyCode === 40 && index < length - 1) {\n// \t\t\t\tindex++;\n// \t\t\t}\n// \t\t\t// Quand l\'utilisateur presse â‡‘, nous sautons Ã  l\'option suivante\n// \t\t\tif (e.keyCode === 38 && index > 0) {\n// \t\t\t\tindex--;\n// \t\t\t}\n// \t\t\t// Quand l\'utilisateur presse enter, nous mettons Ã  jour la valeur en accord\n// \t\t\tif (e.keyCode === 13) {\n// \t\t\t\tlet optList = select.querySelector(".optList");\n// \t\t\t\t// Nous changeons la classe de la liste pour l\'enrouler/dÃ©rouler\n// \t\t\t\toptList.classList.toggle("hidden");\n// \t\t\t\tselect.classList.toggle("active");\n// \t\t\t}\n// \t\t\tupdateValue(select, index);\n// \t\t});\n// \t});\n// });\n\n;// CONCATENATED MODULE: ./src/components/mediaCard/mediaCard.js\nclass MediaCard {\n\tconstructor(domTarget, props) {\n\t\tthis.DOM = domTarget;\n\t\tthis.imgLink = props.imgLink;\n\t\tthis.videoLink = props.videoLink;\n\t\tthis.imgTitle = props.imgTitle;\n\t\tthis.like = props.like;\n\t\tthis.render();\n\t}\n\trender() {\n\t\tconst article = document.createElement("article");\n\t\tarticle.classList.add("mediaCard");\n\t\tthis.DOM.appendChild(article);\n\t\tconst button = document.createElement("button");\n\t\tbutton.classList.add("imgContainer");\n\t\tarticle.appendChild(button);\n\t\tthis.displayImgOrVideo(button);\n\t\tconst infoContainer = document.createElement("div");\n\t\tinfoContainer.classList.add("infoContainer");\n\t\tarticle.appendChild(infoContainer);\n\t\tconst imgTitle = document.createElement("p");\n\t\timgTitle.classList.add("imgTitle");\n\t\timgTitle.textContent = this.imgTitle;\n\t\tinfoContainer.appendChild(imgTitle);\n\t\tconst like = document.createElement("button");\n\t\tlike.classList.add("like");\n\t\tlike.textContent = this.like;\n\t\tinfoContainer.appendChild(like);\n\t\tthis.incrementLike(like);\n\t}\n\n\tincrementLike(like) {\n\t\tlike.addEventListener("click", () => {\n\t\t\tif (!like.hasAttribute("bold")) {\n\t\t\t\tlike.setAttribute("bold", true);\n\t\t\t\tthis.like++;\n\t\t\t\tthis.newLike = this.like;\n\t\t\t} else {\n\t\t\t\tlike.removeAttribute("bold");\n\t\t\t\tthis.like--;\n\t\t\t}\n\t\t\tlike.textContent = this.like;\n\t\t});\n\t}\n\n\tdisplayImgOrVideo(button) {\n\t\tif (this.imgLink.indexOf(".jpg") !== -1) {\n\t\t\tconst img = document.createElement("img");\n\t\t\timg.src = this.imgLink;\n\t\t\timg.alt = "";\n\t\t\tbutton.appendChild(img);\n\t\t} else {\n\t\t\tconst video = document.createElement("video");\n\t\t\t// video.controls = true;\n\t\t\tbutton.appendChild(video);\n\t\t\tconst source = document.createElement("source");\n\t\t\tsource.src = this.videoLink;\n\t\t\tsource.type = "video/mp4";\n\t\t\tvideo.appendChild(source);\n\t\t}\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/components/mediaCardsSection/mediaCardsSection.js\n\n\nclass MediaCardsSection {\n\tconstructor(domTarget, props) {\n\t\tthis.DOM = document.createElement("section");\n\t\tthis.DOM.id = "mediaCardsSection";\n\t\tdomTarget.appendChild(this.DOM);\n\t\tthis.photographerMedias = props.photographerMedias;\n\t\tthis.target = props.target;\n\t\tthis.totalLikes = 0;\n\t\tthis.popularArray = [];\n\t\tthis.dateArray = [];\n\t\tthis.titreArray = [];\n\n\t\tthis.displayMediaCardsWithFilter();\n\t}\n\n\tdisplayMediaCardsWithFilter() {\n\t\tif (this.target === "PopularitÃ©") {\n\t\t\tthis.createPopularArray(this.photographerMedias);\n\t\t\tthis.displayMediaCard(this.DOM, this.popularArray);\n\t\t}\n\t\tif (this.target === "Date") {\n\t\t\tthis.createDateArray(this.photographerMedias);\n\t\t\tthis.displayMediaCard(this.DOM, this.dateArray);\n\t\t}\n\t\tif (this.target === "Titre") {\n\t\t\tthis.createTitreArray(this.photographerMedias);\n\t\t\tthis.displayMediaCard(this.DOM, this.titreArray);\n\t\t}\n\t}\n\n\tcreateTitreArray(medias) {\n\t\tlet arrayTitre = [];\n\t\tmedias.forEach((media) => {\n\t\t\tarrayTitre.push(media.title);\n\t\t});\n\t\tarrayTitre.sort();\n\t\tarrayTitre.forEach((title) => {\n\t\t\tmedias.forEach((media) => {\n\t\t\t\tif (title === media.title) {\n\t\t\t\t\tthis.titreArray.push(media);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tconsole.log(this.titreArray);\n\t\tthis.titreArray = [...new Set(this.titreArray)];\n\t}\n\n\tcreateDateArray(medias) {\n\t\tlet arrayDate = [];\n\t\tmedias.forEach((media) => {\n\t\t\tarrayDate.push(media.date);\n\t\t});\n\t\tarrayDate.sort().reverse();\n\t\tarrayDate.forEach((date) => {\n\t\t\tmedias.forEach((media) => {\n\t\t\t\tif (date === media.date) {\n\t\t\t\t\tthis.dateArray.push(media);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis.dateArray = [...new Set(this.dateArray)];\n\t}\n\n\tcreatePopularArray(medias) {\n\t\tlet arrayLikes = [];\n\t\tmedias.forEach((media) => {\n\t\t\tarrayLikes.push(media.likes);\n\t\t});\n\t\tarrayLikes.sort(function (a, b) {\n\t\t\treturn b - a;\n\t\t});\n\t\tarrayLikes.forEach((likes) => {\n\t\t\tmedias.forEach((media) => {\n\t\t\t\tif (likes === media.likes) {\n\t\t\t\t\tthis.popularArray.push(media);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis.popularArray = [...new Set(this.popularArray)];\n\t}\n\t// createArrayFilter(medias) {\n\t// \tmedias.forEach((media) => {\n\t// \t\tthis.popular.push(media.likes);\n\t//\n\t// \t});\n\n\t// \treturn = this.popular.sort(function (a, b) {\n\t// \t\treturn b - a;\n\t// \t});\n\n\t// \tpopularArrayFilter.forEach((popular) => {\n\t// \t\tmedias.forEach((media) => {\n\t// \t\t\tif (popular === media.likes) {\n\t// \t\t\t\tthis.newPopularArrayMedias.push(media);\n\t// \t\t\t}\n\t// \t\t});\n\t// \t});\n\n\t// \tlet uniqueArr = [...new Set(this.newPopularArrayMedias)];\n\t// \tconsole.log(uniqueArr);\n\t// }\n\n\tdisplayMediaCard(section, medias) {\n\t\tmedias.forEach(\n\t\t\t(\n\t\t\t\t/** @type {{ photographerId: any; image: string; video: string; title: any; likes: any; }} */ media\n\t\t\t) => {\n\t\t\t\tlet mediaCard = new MediaCard(section, {\n\t\t\t\t\timgLink: "./img/photos/" + media.image,\n\t\t\t\t\tvideoLink: "img/videos/" + media.video,\n\t\t\t\t\timgTitle: media.title,\n\t\t\t\t\tlike: media.likes,\n\t\t\t\t});\n\t\t\t\tthis.totalLikes += mediaCard.like;\n\t\t\t}\n\t\t);\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/components/aside/aside.js\nclass Aside {\n\tconstructor(domTarget, props) {\n\t\tthis.DOM = document.createElement("aside");\n\t\tdomTarget.appendChild(this.DOM);\n\t\tthis.price = props.price;\n\t\tthis.like = props.totalLikes;\n\t\tthis.likeElm = document.createElement("p");\n\t\tthis.likeElm.classList.add("like");\n\t\tthis.likeButtons = document.querySelectorAll("button[class=like]");\n\t\tthis.likeElm.textContent = this.like;\n\t\tthis.totalLikesManager();\n\t\tthis.DOM.appendChild(this.likeElm);\n\t\tthis.priceElm = document.createElement("p");\n\t\tthis.priceElm.classList.add("price");\n\t\tthis.priceElm.textContent = this.price + "â‚¬/jour";\n\t\tthis.DOM.appendChild(this.priceElm);\n\t}\n\n\ttotalLikesManager() {\n\t\tthis.likeButtons.forEach((button) => {\n\t\t\tbutton.addEventListener("click", () => {\n\t\t\t\tif (!button.hasAttribute("bold")) {\n\t\t\t\t\tthis.like--;\n\t\t\t\t} else {\n\t\t\t\t\tthis.like++;\n\t\t\t\t}\n\t\t\t\tthis.likeElm.textContent = this.like;\n\t\t\t});\n\t\t});\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/components/photographer-main/photographer-main.js\n\n\n\n\n\nclass PhotographerMain {\n\tconstructor(domTarget, props) {\n\t\tthis.DOM = document.createElement("main");\n\t\tthis.DOM.id = "photographer-main";\n\t\tdomTarget.appendChild(this.DOM);\n\t\tthis.id = props.id;\n\t\tthis.photographer = props.photographer;\n\t\tthis.mediasChosen = props.mediasChosen;\n\t\tthis.widgetValue = "";\n\t\tnew PhotographerCardBig(this.DOM, {\n\t\t\t...this.photographer,\n\t\t});\n\t\tnew Widget(this.DOM);\n\t\tlet mediaCardsSection = new MediaCardsSection(this.DOM, {\n\t\t\tphotographerMedias: this.mediasChosen,\n\t\t\ttarget: "PopularitÃ©",\n\t\t});\n\t\tnew Aside(this.DOM, {\n\t\t\t...this.photographer,\n\t\t\tphotographerMedias: this.mediasChosen,\n\t\t\ttotalLikes: mediaCardsSection.totalLikes,\n\t\t});\n\t\t// @ts-ignore\n\t\twindow.refreshMediaList = (filter) => {\n\t\t\tthis.refresh(filter);\n\t\t};\n\t}\n\n\trefresh(filter) {\n\t\tthis.DOM.removeChild(document.getElementById("mediaCardsSection"));\n\t\tthis.DOM.removeChild(document.querySelector("aside"));\n\t\tlet mediaCardsSection = new MediaCardsSection(this.DOM, {\n\t\t\tphotographerMedias: this.mediasChosen,\n\t\t\ttarget: filter,\n\t\t});\n\t\tnew Aside(this.DOM, {\n\t\t\t...this.photographer,\n\t\t\tphotographerMedias: this.mediasChosen,\n\t\t\ttotalLikes: mediaCardsSection.totalLikes,\n\t\t});\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/components/form-modal/form-modal.js\n// export default function FormModal() {\n// \t/**\n// \t * Bouton croix fermeture form-modal\n// \t */\n// \tconst btClose = document.querySelector(".close");\n// \t/**\n// \t * Background de form-modal\n// \t */\n// \tconst bground = document.querySelector(".bground");\n// \t/**\n// \t * Boutons submit de form-modal\n// \t */\n// \tconst btSubmits = document.querySelectorAll("button[type=submit]");\n// \t/**\n// \t * Inputs de [type=text]\n// \t */\n// \tconst inputsTexts = document.querySelectorAll("input[type=text]");\n// \t/**\n// \t * Input Email\n// \t */\n// \tconst inputEmail = document.getElementById("email");\n// \t/**\n// \t * Tableau formDatas\n// \t */\n// \tconst formDatas = document.querySelectorAll(".formData");\n// \tconst formModal = document.querySelector(".form-modal");\n// \tconst textArea = document.querySelector("textarea");\n// \tconst form = document.querySelector("form[name=reserve]");\n// \tconsole.log(form);\n// \t/* ************* REGEX **************************************************************** */\n// \t/**\n// \t * Regex (< 2 characters; Pas de chiffres)\n// \t */\n// \tconst firstLastRegex = /^[^0-9_!Â¡?Ã·?Â¿/\\\\+=@#$%Ë†&*(){}|~<>;:[\\]]{2,}$/;\n// \t/**\n// \t * Regex de vÃ©rification d\'email\n// \t */\n// \tconst emailRegex =\n// \t\t/^(([^<>()[]\\.,;:s@]+(.[^<>()[]\\.,;:s@]+)*)|(.+))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/; // VÃ©rification d\'email\n\n// \t/**\n// \t * VÃ©rifie si toutes les donnÃ©es entrÃ©es par l\'utilisateur sont valide.\n// \t * Si les donnÃ©es sont validÃ©es on les affiche dans la console\n// \t * et le message de validation apparait.\n// \t *\n// \t * @param   {any}  btSubmits  [btSubmits description]\n// \t * @param   {any}  formDatas  [formDatas description]\n// \t *\n// \t * @return  {void}             Affiche les donnÃ©es et le message de validation si les donnÃ©es sont validÃ©es.\n// \t */\n// \tfunction submit(btSubmits, formDatas) {\n// \t\tbtSubmits.forEach((btSubmit) =>\n// \t\t\tbtSubmit.addEventListener("click", function (e) {\n// \t\t\t\te.preventDefault();\n// \t\t\t\tif (verifDataValid(formDatas)) {\n// \t\t\t\t\tcreateValidText(btSubmits, btClose);\n// \t\t\t\t\tform.reset();\n// \t\t\t\t\tformDatas.forEach((formData) => {\n// \t\t\t\t\t\tformData.removeAttribute("data-valid");\n// \t\t\t\t\t});\n// \t\t\t\t\tconsole.log("data valide");\n// \t\t\t\t\t// if ok => log + affiche valid message\n// \t\t\t\t}\n\n// \t\t\t\t// else => msg error\n// \t\t\t\tconsole.log("test");\n// \t\t\t})\n// \t\t);\n// \t}\n\n// \t/**\n// \t * Affiche le message de validation\n// \t * @return  {void}  Affiche le message de validation / Change les attributs des boutons de la modal\n// \t */\n// \tfunction createValidText(btSubmits, btClose) {\n// \t\tconst validDiv = document.createElement("div");\n// \t\tvalidDiv.id = "validDiv";\n// \t\tformModal.appendChild(validDiv);\n// \t\tvalidDiv.innerHTML = "<p>Merci ! Votre message a bien Ã©tÃ© envoyÃ©.</p>";\n// \t\tbtClose.addEventListener("click", function () {\n// \t\t\tformModal.removeChild(document.getElementById("validDiv"));\n// \t\t});\n// \t\t// btSubmits.forEach((btSubmit) => {\n// \t\t// \t// btSubmit.setAttribute("type", "button");\n// \t\t// \t// btSubmit.setAttribute("value", "Fermer");\n// \t\t// \t// btSubmit.setAttribute("name", "button");\n// \t\t// \t// btClose.setAttribute("name", "button");\n// \t\t// });\n// \t}\n\n// \t/**\n// \t * Verification que tous les elements du tableau formDatas ont l\'attribut "data-valid"\n// \t *\n// \t * @param   {Array}  formDatas  Tableau formDatas\n// \t *\n// \t * @return  {Boolean}             Tous les elements ont l\'attribut "data-valid" => true;\n// \t */\n// \tfunction verifDataValid(formDatas) {\n// \t\tif (\n// \t\t\t(\n// \t\t\t\tformDatas[0] &&\n// \t\t\t\tformDatas[1] &&\n// \t\t\t\tformDatas[2] &&\n// \t\t\t\tformDatas[3]\n// \t\t\t).hasAttribute("data-valid")\n// \t\t) {\n// \t\t\treturn true;\n// \t\t} else {\n// \t\t\treturn false;\n// \t\t}\n// \t}\n\n// \tfunction hideError(cible) {\n// \t\tcible.removeAttribute("data-error-visible");\n// \t\tcible.removeAttribute("data-error");\n// \t\tcible.setAttribute("data-valid", "true");\n// \t}\n// \tfunction showError(cible, errorText) {\n// \t\tcible.removeAttribute("data-valid");\n// \t\tcible.setAttribute("data-error-visible", "true");\n// \t\tcible.setAttribute("data-error", errorText);\n// \t}\n\n// \tfunction verifMessage(textArea) {\n// \t\ttextArea.addEventListener("input", function (e) {\n// \t\t\tlet textAreaValue = e.target.value.trim();\n// \t\t\tlet cible = textArea.parentNode;\n// \t\t\tif (textAreaValue.length < 8) {\n// \t\t\t\tshowError(cible, "Veuillez entrer 8 caractÃ©res minimum");\n// \t\t\t} else {\n// \t\t\t\thideError(cible);\n// \t\t\t}\n// \t\t});\n// \t}\n\n// \t/**\n// \t * VÃ©rification de la valeur entrÃ©e par l\'utilisateur pour l\'Email\n// \t *\n// \t * @param   {any}  inputEmail  Input Email\n// \t *\n// \t * @return  {void}              Affiche le message d\'erreur si l\'Email n\'est pas valide\n// \t */\n// \tfunction verifEmail(inputEmail) {\n// \t\tinputEmail.addEventListener("input", function (e) {\n// \t\t\tlet value = e.target.value;\n// \t\t\tlet cible = inputEmail.parentNode;\n// \t\t\tif (!emailRegex.test(value)) {\n// \t\t\t\tshowError(cible, "Veuillez entrez une adresse email valide");\n// \t\t\t} else {\n// \t\t\t\thideError(cible);\n// \t\t\t}\n// \t\t});\n// \t}\n\n// \t/**\n// \t * VÃ©rification des valeurs entrÃ©es par l\'utilisateur pour le Nom et le PrÃ©nom\n// \t *\n// \t * @param   {any}  inputsTexts  Inputs de [type=text]\n// \t *\n// \t * @return  {void}              Affiche le message d\'erreur si l\'entrÃ©e n\'est pas valide\n// \t */\n// \tfunction verifNameAndSurname(inputsTexts) {\n// \t\tinputsTexts.forEach((inputText) =>\n// \t\t\tinputText.addEventListener("input", function (e) {\n// \t\t\t\tlet textValue = e.target.value.trim();\n// \t\t\t\tlet cible = inputText.parentNode;\n// \t\t\t\tif (textValue.length < 2) {\n// \t\t\t\t\tshowError(cible, "Veuillez entrer 2 caractÃ©res minimum");\n// \t\t\t\t} else if (!firstLastRegex.test(textValue)) {\n// \t\t\t\t\tshowError(\n// \t\t\t\t\t\tcible,\n// \t\t\t\t\t\t"Veuillez entrez seulement des caractÃ©res litterales"\n// \t\t\t\t\t);\n// \t\t\t\t} else {\n// \t\t\t\t\thideError(cible);\n// \t\t\t\t}\n// \t\t\t})\n// \t\t);\n// \t}\n\n// \t/**\n// \t * Au clic sur la croix => Fermeture de form-modal\n// \t */\n// \tbtClose.addEventListener("click", function () {\n// \t\tbground.removeAttribute("visible");\n// \t});\n\n// \tverifNameAndSurname(inputsTexts);\n// \tverifEmail(inputEmail);\n// \tverifMessage(textArea);\n// \tsubmit(btSubmits, formDatas);\n// }\nclass FormModal {\n\tconstructor(domTarget, props) {\n\t\tthis.name = props.name;\n\n\t\tthis.DOM = document.createElement("div");\n\t\tthis.DOM.classList.add("bground");\n\t\tthis.DOM.style.display = "none";\n\t\tdomTarget.appendChild(this.DOM);\n\t\tthis.content = document.createElement("div");\n\t\tthis.content.classList.add("content");\n\t\tthis.DOM.appendChild(this.content);\n\t\tthis.close = document.createElement("button");\n\t\tthis.close.classList.add("close");\n\t\tthis.close.type = "button";\n\t\tthis.close.onclick = () => {\n\t\t\tthis.closeFormContact();\n\t\t};\n\t\tthis.content.appendChild(this.close);\n\t\tthis.formModal = document.createElement("div");\n\t\tthis.formModal.classList.add("form-modal");\n\t\tthis.content.appendChild(this.formModal);\n\t\tthis.h1 = document.createElement("h1");\n\t\tthis.h1.innerHTML = `Contactez-moi<br>${this.name}`;\n\t\tthis.formModal.appendChild(this.h1);\n\t\tconsole.log(this.DOM);\n\t}\n\n\tcloseFormContact() {\n\t\tthis.DOM.style.display = "none";\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/app.js\n\n\n\n\n\n\n\n\n\n/* *************************************************************************************************************************************************************************************************************************************************************** */\nconst body = document.body;\n\n/**\n * Object contains functions for views\n *\n * @var {object}\n */\nconst views = {\n\t/**\n\t * Gestion of view lobby\n\t *\n\t * @return  {promise}  FonctionnalitÃ©s et affichage de la vue lobby\n\t */\n\tlobby: async function () {\n\t\tconst photographers = await fetchPhotographers();\n\t\tlet tagsChecked = [];\n\t\tlet url = new URL(window.location.href);\n\t\tlet tag = url.searchParams.get("tag");\n\t\tif (tag) {\n\t\t\ttagsChecked.push("#" + tag);\n\t\t}\n\t\tnew Header(body, photographers, tagsChecked, "header");\n\t\tnew BtContact(body, {\n\t\t\tclassName: "goToContent",\n\t\t\ttype: "button",\n\t\t\ttext: "Passer au contenu",\n\t\t});\n\t\tnew MainLobby(body, {\n\t\t\tphotographers: photographers,\n\t\t\ttagsChecked: tagsChecked,\n\t\t});\n\t},\n\n\t/**\n\t * Gestion of view photographer\n\t *\n\t * @return  {promise}  FonctionnalitÃ©s et affichage de la vue photographer\n\t */\n\tphotographer: async function () {\n\t\tlet tagsChecked = [];\n\t\tlet url = new URL(window.location.href);\n\t\tlet id = url.searchParams.get("id");\n\t\tconst photographer = await fetchChosenPhotographer(id);\n\t\tconst mediasChosen = await fetchChosenMedia(id);\n\t\tnew Header(body, "", tagsChecked, "header", "header-photographer");\n\t\tnew PhotographerMain(body, {\n\t\t\tphotographer: photographer,\n\t\t\tmediasChosen: mediasChosen,\n\t\t\tid: id,\n\t\t});\n\t\tnew FormModal(body, { name: photographer.name });\n\t},\n};\n\nif (window.location.pathname.split("/").pop() == "") views.lobby();\nelse if (window.location.pathname.split("/").pop() == "photographer.html")\n\tviews.photographer();\n\n\n//# sourceURL=webpack://p6/./src/app.js_+_13_modules?')}},__webpack_exports__={};__webpack_modules__[520]()})();
const widget=document.getElementById("widget");function deactivateSelect(e){e.classList.contains("active")&&(e.querySelector(".optList").classList.add("hidden"),e.classList.remove("active"))}function activeSelect(e,t){e.classList.contains("active")||t.forEach(deactivateSelect)}function toggleOptList(e){e.querySelector(".optList").classList.toggle("hidden"),e.classList.toggle("active")}function highlightOption(e,t){e.querySelectorAll(".option").forEach(function(e){e.classList.remove("highlight")}),t.classList.add("highlight")}function updateValue(e,t){var i=e.previousElementSibling,n=e.querySelector(".value"),o=e.querySelectorAll(".option");o.forEach(function(e){e.setAttribute("aria-selected","false")}),o[t].setAttribute("aria-selected","true"),i.selectedIndex=t,n.innerHTML=o[t].innerHTML,highlightOption(e,o[t])}function getIndex(e){return e.previousElementSibling.selectedIndex}window.addEventListener("load",function(){widget.classList.remove("no-widget"),widget.classList.add("widget")}),window.addEventListener("load",function(){var e=document.querySelectorAll(".select");e.forEach(function(t){t.querySelectorAll(".option").forEach(function(e){e.addEventListener("mouseover",function(){highlightOption(t,e)})}),t.addEventListener("click",function(){toggleOptList(t)}),t.addEventListener("focus",function(){activeSelect(t,e)}),t.addEventListener("blur",function(){deactivateSelect(t)})})}),window.addEventListener("load",function(){document.querySelectorAll(".select").forEach(function(n){var o=n.querySelectorAll(".option"),e=getIndex(n);n.tabIndex=0,n.previousElementSibling.tabIndex=-1,updateValue(n,e),o.forEach(function(e,t){e.addEventListener("click",function(){updateValue(n,t)})}),n.addEventListener("keyup",function(e){var t=o.length,i=getIndex(n);40===e.keyCode&&i<t-1&&i++,38===e.keyCode&&0<i&&i--,13===e.keyCode&&(n.querySelector(".optList").classList.toggle("hidden"),n.classList.toggle("active")),updateValue(n,i)})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

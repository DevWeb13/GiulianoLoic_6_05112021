const btContacts=document.querySelectorAll(".btContact[type=button]");btContacts.forEach(e=>e.addEventListener("click",function(){bground.setAttribute("visible","true")}));const btClose=document.querySelector(".close"),bground=document.querySelector(".bground"),btSubmits=document.querySelectorAll("button[type=submit]"),inputsTexts=document.querySelectorAll("input[type=text]"),inputEmail=document.getElementById("email"),formDatas=document.querySelectorAll(".formData"),formModal=document.querySelector(".form-modal"),textArea=document.querySelector("textarea"),form=document.querySelector("form[name=reserve]");console.log(form);const firstLastRegex=/^[^0-9_!¡?÷?¿/\\+=@#$%ˆ&*(){}|~<>;:[\]]{2,}$/,emailRegex=/^(([^<>()[]\.,;:s@]+(.[^<>()[]\.,;:s@]+)*)|(.+))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/;function submit(t,i){t.forEach(e=>e.addEventListener("click",function(e){e.preventDefault(),verifDataValid(i)&&(createValidText(t,btClose),form.reset(),i.forEach(e=>{e.removeAttribute("data-valid")}),console.log("data valide")),console.log("test")}))}function createValidText(e,t){const i=document.createElement("div");i.id="validDiv",formModal.appendChild(i),i.innerHTML="<p>Merci ! Votre message a bien été envoyé.</p>",t.addEventListener("click",function(){formModal.removeChild(document.getElementById("validDiv"))})}function verifDataValid(e){return!!(e[0]&&e[1]&&e[2]&&e[3]).hasAttribute("data-valid")}function hideError(e){e.removeAttribute("data-error-visible"),e.removeAttribute("data-error"),e.setAttribute("data-valid","true")}function showError(e,t){e.removeAttribute("data-valid"),e.setAttribute("data-error-visible","true"),e.setAttribute("data-error",t)}function verifMessage(i){i.addEventListener("input",function(e){var t=e.target.value.trim(),e=i.parentNode;t.length<8?showError(e,"Veuillez entrer 8 caractéres minimum"):hideError(e)})}function verifEmail(i){i.addEventListener("input",function(e){var t=e.target.value,e=i.parentNode;emailRegex.test(t)?hideError(e):showError(e,"Veuillez entrez une adresse email valide")})}function verifNameAndSurname(e){e.forEach(i=>i.addEventListener("input",function(e){var t=e.target.value.trim(),e=i.parentNode;t.length<2?showError(e,"Veuillez entrer 2 caractéres minimum"):firstLastRegex.test(t)?hideError(e):showError(e,"Veuillez entrez seulement des caractéres litterales")}))}btClose.addEventListener("click",function(){bground.removeAttribute("visible")}),verifNameAndSurname(inputsTexts),verifEmail(inputEmail),verifMessage(textArea),submit(btSubmits,formDatas);const widget=document.getElementById("widget");function deactivateSelect(e){e.classList.contains("active")&&(e.querySelector(".optList").classList.add("hidden"),e.classList.remove("active"))}function activeSelect(e,t){e.classList.contains("active")||t.forEach(deactivateSelect)}function toggleOptList(e){e.querySelector(".optList").classList.toggle("hidden"),e.classList.toggle("active")}function highlightOption(e,t){e.querySelectorAll(".option").forEach(function(e){e.classList.remove("highlight")}),t.classList.add("highlight")}function updateValue(e,t){var i=e.previousElementSibling,r=e.querySelector(".value"),n=e.querySelectorAll(".option");n.forEach(function(e){e.setAttribute("aria-selected","false")}),n[t].setAttribute("aria-selected","true"),i.selectedIndex=t,r.innerHTML=n[t].innerHTML,highlightOption(e,n[t])}function getIndex(e){return e.previousElementSibling.selectedIndex}window.addEventListener("load",function(){widget.classList.remove("no-widget"),widget.classList.add("widget")}),window.addEventListener("load",function(){var e=document.querySelectorAll(".select");e.forEach(function(t){t.querySelectorAll(".option").forEach(function(e){e.addEventListener("mouseover",function(){highlightOption(t,e)})}),t.addEventListener("click",function(){toggleOptList(t)}),t.addEventListener("focus",function(){activeSelect(t,e)}),t.addEventListener("blur",function(){deactivateSelect(t)})})}),window.addEventListener("load",function(){document.querySelectorAll(".select").forEach(function(r){var n=r.querySelectorAll(".option"),e=getIndex(r);r.tabIndex=0,r.previousElementSibling.tabIndex=-1,updateValue(r,e),n.forEach(function(e,t){e.addEventListener("click",function(){updateValue(r,t)})}),r.addEventListener("keyup",function(e){var t=n.length,i=getIndex(r);40===e.keyCode&&i<t-1&&i++,38===e.keyCode&&0<i&&i--,13===e.keyCode&&(r.querySelector(".optList").classList.toggle("hidden"),r.classList.toggle("active")),updateValue(r,i)})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
